package DateStructure;

public class DataStructureDemo {
    /*栈
    * 后进先出，先进后出*/

    /*队列
    * 先进先出，后进后出*/

    /*数组
    * 数组存储元素通过索引定位，所以查询任意数据耗时相同
    * 查询速度快，删除效率低，添加效率极低*/

    /*链表
    * 链表中的元素在内存中是不连续储存的
    * 每个元素节点包含数据值和下一个元素的地址
    * 链表的查询慢，无论查询哪个都要从头开始查找
    * 增删比较快*/

    /*二叉树
    * 每个值最多有两个节点，分别是左子节点和右子节点
    * 二叉查找树：
    * 小的都往左边走，大的都往右边走
    * 目的是提高检索数据的性能
    * 规则：小的村左边，大的存右边，一样的不存
    * 平衡二叉树：
    * 在满足二叉查找树的同时，让树尽可能地矮小，以此提高效率
    * 任意节点的左右两个子树高度不超过1
    * 基本策略是进行左旋或者右旋
    * 红黑树
    * 每一个节点为红色或者黑色，不是通过高度平衡的，而是通过红黑规则进行实现的
    * 根节点必须是黑色
    * 如果一个节点没有子节点或者父节点，指针属性值为Nil
    * 节点红，子节点就得是黑，节点黑，子节点就得是红，不能同色相连
    * 每一个节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点
    * 添加节点，默认红色的效率高*/
}
